/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package myhustwork.luonvuituoi.GUI;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import myhustwork.luonvuituoi.DTO.CategoryDTO;
import myhustwork.luonvuituoi.DAO.CategoryDAO;
import myhustwork.luonvuituoi.DTO.DatasetDTO;
import myhustwork.luonvuituoi.Util.DateRelated;
import myhustwork.luonvuituoi.BLL.FluctuationBLL;
import myhustwork.luonvuituoi.DTO.FluctuationDTO;
import myhustwork.luonvuituoi.Util.Converter;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author vvlalalove193
 */
public class StatisticsGUI extends javax.swing.JFrame {
    private FluctuationBLL flucBLL;
    private CategoryDAO catDAO;

    /**
     * Creates new form StatisticsGUI
     */
    public StatisticsGUI() {
        flucBLL = new FluctuationBLL();
        catDAO = new CategoryDAO();
        this.setTitle("LuonVuiTuoi");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel1 = new keeptoo.KGradientPanel();
        lblForm = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        kGradientPanel5 = new keeptoo.KGradientPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblDate1 = new javax.swing.JTable();
        kGradientPanel2 = new keeptoo.KGradientPanel();
        lblDate = new javax.swing.JLabel();
        lblDate1 = new javax.swing.JLabel();
        btnStatDate = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDate = new javax.swing.JTable();
        dateEndDate = new com.toedter.calendar.JDateChooser();
        dateStartDate = new com.toedter.calendar.JDateChooser();
        kGradientPanel3 = new keeptoo.KGradientPanel();
        lblDate2 = new javax.swing.JLabel();
        btnStatMonth = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMonth = new javax.swing.JTable();
        jmcMonthMonth = new com.toedter.calendar.JMonthChooser();
        jmcMonthYear = new com.toedter.calendar.JYearChooser();
        kGradientPanel4 = new keeptoo.KGradientPanel();
        lblDate3 = new javax.swing.JLabel();
        btnStatYear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblYear = new javax.swing.JTable();
        jYear = new com.toedter.calendar.JYearChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(960, 540));

        kGradientPanel1.setkEndColor(new java.awt.Color(255, 175, 175));
        kGradientPanel1.setkGradientFocus(100);
        kGradientPanel1.setkStartColor(new java.awt.Color(255, 255, 255));

        lblForm.setFont(new java.awt.Font("r0c0i Linotte", 0, 36)); // NOI18N
        lblForm.setForeground(new java.awt.Color(255, 51, 51));
        lblForm.setText("Thống kê");

        jTabbedPane1.setForeground(new java.awt.Color(255, 51, 51));
        jTabbedPane1.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N

        kGradientPanel5.setkEndColor(new java.awt.Color(255, 175, 175));
        kGradientPanel5.setkGradientFocus(100);
        kGradientPanel5.setkStartColor(new java.awt.Color(255, 255, 255));

        tblDate1.setFont(new java.awt.Font("r0c0i Linotte", 0, 14)); // NOI18N
        tblDate1.setForeground(new java.awt.Color(255, 51, 51));
        tblDate1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {}
            },
            new String [] {

            }
        ));
        tblDate1.setRowHeight(20);
        tblDate1.setRowSelectionAllowed(false);
        tblDate1.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jScrollPane4.setViewportView(tblDate1);

        javax.swing.GroupLayout kGradientPanel5Layout = new javax.swing.GroupLayout(kGradientPanel5);
        kGradientPanel5.setLayout(kGradientPanel5Layout);
        kGradientPanel5Layout.setHorizontalGroup(
            kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel5Layout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 799, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );
        kGradientPanel5Layout.setVerticalGroup(
            kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel5Layout.createSequentialGroup()
                .addContainerGap(80, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Tổng quát", kGradientPanel5);

        kGradientPanel2.setkEndColor(new java.awt.Color(255, 175, 175));
        kGradientPanel2.setkGradientFocus(100);
        kGradientPanel2.setkStartColor(new java.awt.Color(255, 255, 255));

        lblDate.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 51, 51));
        lblDate.setText("Ngày đầu tiên");

        lblDate1.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N
        lblDate1.setForeground(new java.awt.Color(255, 51, 51));
        lblDate1.setText("Ngày cuối cùng");

        btnStatDate.setBackground(new java.awt.Color(255, 51, 51));
        btnStatDate.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N
        btnStatDate.setForeground(new java.awt.Color(255, 255, 255));
        btnStatDate.setText("Thống kê");
        btnStatDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStatDateActionPerformed(evt);
            }
        });

        tblDate.setFont(new java.awt.Font("r0c0i Linotte", 0, 14)); // NOI18N
        tblDate.setForeground(new java.awt.Color(255, 51, 51));
        tblDate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {}
            },
            new String [] {

            }
        ));
        tblDate.setRowHeight(20);
        tblDate.setRowSelectionAllowed(false);
        tblDate.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jScrollPane3.setViewportView(tblDate);

        dateEndDate.setForeground(new java.awt.Color(255, 51, 51));
        dateEndDate.setDateFormatString("dd/MM/yyyy");
        dateEndDate.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N

        dateStartDate.setForeground(new java.awt.Color(255, 51, 51));
        dateStartDate.setDateFormatString("dd/MM/yyyy");
        dateStartDate.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N

        javax.swing.GroupLayout kGradientPanel2Layout = new javax.swing.GroupLayout(kGradientPanel2);
        kGradientPanel2.setLayout(kGradientPanel2Layout);
        kGradientPanel2Layout.setHorizontalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel2Layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(btnStatDate, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(kGradientPanel2Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblDate1, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                            .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                            .addComponent(dateEndDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateStartDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );
        kGradientPanel2Layout.setVerticalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(lblDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(lblDate1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(btnStatDate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel2Layout.createSequentialGroup()
                .addContainerGap(80, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Theo ngày", kGradientPanel2);

        kGradientPanel3.setkEndColor(new java.awt.Color(255, 175, 175));
        kGradientPanel3.setkGradientFocus(100);
        kGradientPanel3.setkStartColor(new java.awt.Color(255, 255, 255));

        lblDate2.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N
        lblDate2.setForeground(new java.awt.Color(255, 51, 51));
        lblDate2.setText("Tháng");

        btnStatMonth.setBackground(new java.awt.Color(255, 51, 51));
        btnStatMonth.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N
        btnStatMonth.setForeground(new java.awt.Color(255, 255, 255));
        btnStatMonth.setText("Thống kê");
        btnStatMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStatMonthActionPerformed(evt);
            }
        });

        tblMonth.setFont(new java.awt.Font("r0c0i Linotte", 0, 14)); // NOI18N
        tblMonth.setForeground(new java.awt.Color(255, 51, 51));
        tblMonth.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {}
            },
            new String [] {

            }
        ));
        tblMonth.setRowHeight(20);
        tblMonth.setRowSelectionAllowed(false);
        tblMonth.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(tblMonth);

        jmcMonthMonth.setForeground(new java.awt.Color(255, 51, 51));
        jmcMonthMonth.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N

        jmcMonthYear.setForeground(new java.awt.Color(255, 51, 51));
        jmcMonthYear.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N

        javax.swing.GroupLayout kGradientPanel3Layout = new javax.swing.GroupLayout(kGradientPanel3);
        kGradientPanel3.setLayout(kGradientPanel3Layout);
        kGradientPanel3Layout.setHorizontalGroup(
            kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel3Layout.createSequentialGroup()
                .addGroup(kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel3Layout.createSequentialGroup()
                        .addContainerGap(26, Short.MAX_VALUE)
                        .addGroup(kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(kGradientPanel3Layout.createSequentialGroup()
                                .addComponent(lblDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(60, 60, 60))
                            .addGroup(kGradientPanel3Layout.createSequentialGroup()
                                .addComponent(jmcMonthMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jmcMonthYear, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(69, 69, 69))))
                    .addGroup(kGradientPanel3Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(btnStatMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );
        kGradientPanel3Layout.setVerticalGroup(
            kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel3Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(kGradientPanel3Layout.createSequentialGroup()
                        .addComponent(lblDate2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jmcMonthMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jmcMonthYear, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(57, 57, 57)
                        .addComponent(btnStatMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Theo tháng", kGradientPanel3);

        kGradientPanel4.setkEndColor(new java.awt.Color(255, 175, 175));
        kGradientPanel4.setkGradientFocus(100);
        kGradientPanel4.setkStartColor(new java.awt.Color(255, 255, 255));

        lblDate3.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N
        lblDate3.setForeground(new java.awt.Color(255, 51, 51));
        lblDate3.setText("Năm");

        btnStatYear.setBackground(new java.awt.Color(255, 51, 51));
        btnStatYear.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N
        btnStatYear.setForeground(new java.awt.Color(255, 255, 255));
        btnStatYear.setText("Thống kê");
        btnStatYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStatYearActionPerformed(evt);
            }
        });

        tblYear.setFont(new java.awt.Font("r0c0i Linotte", 0, 14)); // NOI18N
        tblYear.setForeground(new java.awt.Color(255, 51, 51));
        tblYear.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {}
            },
            new String [] {

            }
        ));
        tblYear.setRowHeight(20);
        tblYear.setRowSelectionAllowed(false);
        tblYear.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(tblYear);

        jYear.setForeground(new java.awt.Color(255, 51, 51));
        jYear.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N

        javax.swing.GroupLayout kGradientPanel4Layout = new javax.swing.GroupLayout(kGradientPanel4);
        kGradientPanel4.setLayout(kGradientPanel4Layout);
        kGradientPanel4Layout.setHorizontalGroup(
            kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel4Layout.createSequentialGroup()
                .addGroup(kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel4Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(btnStatYear, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(kGradientPanel4Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jYear, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDate3, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );
        kGradientPanel4Layout.setVerticalGroup(
            kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel4Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(kGradientPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(kGradientPanel4Layout.createSequentialGroup()
                        .addComponent(lblDate3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jYear, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(btnStatYear, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Theo năm", kGradientPanel4);

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addGap(383, 383, 383)
                .addComponent(lblForm)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jTabbedPane1)
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblForm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStatDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStatDateActionPerformed
        // TODO add your handling code here:
        LocalDate dateStart = Converter.fromDatetoLocalDate(dateStartDate.getDate()).minusDays(1);
        LocalDate dateEnd = Converter.fromDatetoLocalDate(dateEndDate.getDate()).plusDays(1);
        DefaultPieDataset[] dataset = getDataset(dateStart, dateEnd);
        createStatFrame(dataset, "Thống kê từ ngày " + dateStartDate.getDateFormatString() + " đến ngày " + dateEndDate.getDateFormatString());
        
        List<DatasetDTO> tableDataset = null;        
        try {
            tableDataset = flucBLL.getStatDatasetByDate(dateStart, dateEnd);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "An error occured", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
        DatasetTableModel model = new DatasetTableModel(tableDataset);
        //create the table
        tblDate.setModel(model);
        tblDate.repaint();
    }//GEN-LAST:event_btnStatDateActionPerformed

    private void btnStatMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStatMonthActionPerformed
        // TODO add your handling code here:
//        LocalDate date = Converter.toDate(txtDateStartOfMonth.getText());
        LocalDate lastDayOfLastMonth = DateRelated.getFirstDayOfMonth(jmcMonthMonth.getMonth()+1, jmcMonthYear.getYear()).minusDays(1);
        LocalDate firstDayOfNextMonth = DateRelated.getLastDayOfMonth(jmcMonthMonth.getMonth()+1, jmcMonthYear.getYear()).plusDays(1);
        DefaultPieDataset[] dataset = getDataset(lastDayOfLastMonth, firstDayOfNextMonth);
        
        createStatFrame(dataset, "Thống kê tháng " + String.valueOf(jmcMonthMonth.getMonth() + 1) + " năm " + String.valueOf(jmcMonthYear.getYear()));
       
        List<DatasetDTO> tableDataset = null;        
        try {
            tableDataset = flucBLL.getStatDatasetByDate(lastDayOfLastMonth, firstDayOfNextMonth);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "An error occured", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
        DatasetTableModel model = new DatasetTableModel(tableDataset);
        //create the table
        tblMonth.setModel(model);
        tblMonth.repaint();
    }//GEN-LAST:event_btnStatMonthActionPerformed

    private void btnStatYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStatYearActionPerformed
        // TODO add your handling code here:
        int year = jYear.getYear();
        LocalDate firstDayOfYear = DateRelated.getFirstDayOfYear(year).minusDays(1);
        LocalDate lastDayOfYear = DateRelated.getLastDayOfYear(year).plusDays(1);
        DefaultPieDataset[] chartDataset = getDataset(firstDayOfYear, lastDayOfYear);
        List<DatasetDTO> tableDataset = null;
        try {
            tableDataset = flucBLL.getStatDatasetByDate(firstDayOfYear, lastDayOfYear);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "An error occured", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
        createStatFrame(chartDataset, "Thống kê trong năm " + String.valueOf(year));
        
        DatasetTableModel model = new DatasetTableModel(tableDataset);
        //create the table
        tblYear.setModel(model);
        tblYear.repaint();
    }//GEN-LAST:event_btnStatYearActionPerformed

    public void createStatFrame(DefaultPieDataset[] dataset, String title){
        JFrame frame = new JFrame();
        frame.setTitle(title);
        frame.setSize(new Dimension(850,400));
        frame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        JFreeChart chart1 = ChartFactory.createPieChart("Tinh hinh thu", dataset[1], true, true, true);
        ChartPanel panel1 = new ChartPanel(chart1);
        chart1.setBackgroundPaint(new Color(0, 0, 0, 0));
        panel1.setBackground(new Color(0, 0, 0, 0));
        panel1.setPreferredSize(new java.awt.Dimension(308, 270));
        panel1.setSize(400,400);
        frame.add(panel1, BorderLayout.WEST);
        
        JFreeChart chart0 = ChartFactory.createPieChart("Tinh hinh chi", dataset[0], true, true, true);
        ChartPanel panel0 = new ChartPanel(chart0);
        chart0.setBackgroundPaint(new Color(0, 0, 0, 0));
        panel0.setBackground(new Color(0, 0, 0, 0));
        panel0.setPreferredSize(new java.awt.Dimension(308, 270));
        panel0.setSize(400,400);
        frame.add(panel0, BorderLayout.EAST);
        
        frame.setVisible(true);
    }
    
    public DefaultPieDataset[] getDataset(LocalDate date1, LocalDate date2){
        DefaultPieDataset[] dataset = new DefaultPieDataset[2];
        dataset[0] = new DefaultPieDataset();
        dataset[1] = new DefaultPieDataset();
        
        CategoryDTO[] listCategory = null;
        try {
            listCategory = catDAO.getAll();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
        
        List<DatasetDTO> arrList = new ArrayList<DatasetDTO>();
        try {
            arrList = flucBLL.getStatDatasetByDate(date1, date2);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "An error occured", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
        
        for (int i = 0; i < arrList.size(); i++){
            System.err.println(arrList.get(i).getName());
            try {
                switch (catDAO.get(arrList.get(i).getId()).getCategoryType()) {
                    case CategoryDTO.CHI:
                        dataset[0].setValue(arrList.get(i).getName(), arrList.get(i).getValue());
                        break;
                    case CategoryDTO.THU:
                        dataset[1].setValue(arrList.get(i).getName(), arrList.get(i).getValue());
                        break;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "An error occured", "Error", JOptionPane.ERROR_MESSAGE);
                
            }
        }
        return dataset;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StatisticsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StatisticsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StatisticsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StatisticsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StatisticsGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStatDate;
    private javax.swing.JButton btnStatMonth;
    private javax.swing.JButton btnStatYear;
    private com.toedter.calendar.JDateChooser dateEndDate;
    private com.toedter.calendar.JDateChooser dateStartDate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private com.toedter.calendar.JYearChooser jYear;
    private com.toedter.calendar.JMonthChooser jmcMonthMonth;
    private com.toedter.calendar.JYearChooser jmcMonthYear;
    private keeptoo.KGradientPanel kGradientPanel1;
    private keeptoo.KGradientPanel kGradientPanel2;
    private keeptoo.KGradientPanel kGradientPanel3;
    private keeptoo.KGradientPanel kGradientPanel4;
    private keeptoo.KGradientPanel kGradientPanel5;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDate1;
    private javax.swing.JLabel lblDate2;
    private javax.swing.JLabel lblDate3;
    private javax.swing.JLabel lblForm;
    private javax.swing.JTable tblDate;
    private javax.swing.JTable tblDate1;
    private javax.swing.JTable tblMonth;
    private javax.swing.JTable tblYear;
    // End of variables declaration//GEN-END:variables
}

class DatasetTableModel extends AbstractTableModel{
    private final List<DatasetDTO> datasetList;
     
    private final String[] columnNames = new String[] {
            "Tên hạng mục", "Số tiền", "Số phần trăm", "Loại chi tiêu"
    };
    private final Class[] columnClass = new Class[] {
        String.class, Long.class, Double.class, String.class
    };
 
    public DatasetTableModel(List<DatasetDTO> datasetList)
    {
        this.datasetList = datasetList;
    }
     
    @Override
    public String getColumnName(int column)
    {
        return columnNames[column];
    }
 
    @Override
    public Class<?> getColumnClass(int columnIndex)
    {
        return columnClass[columnIndex];
    }
 
    @Override
    public int getColumnCount()
    {
        return columnNames.length;
    }
 
    @Override
    public int getRowCount()
    {
        return datasetList.size();
    }
 
    @Override
    public Object getValueAt(int rowIndex, int columnIndex)
    {
        DatasetDTO row = datasetList.get(rowIndex);
        if(0 == columnIndex) {
            return row.getName();
        }
        else if(1 == columnIndex) {
            return row.getAmount();
        }
        else if(2 == columnIndex) {
            return row.getValue();
        }
        else if(3 == columnIndex){
            return row.getType();
        }
        return null;
    }
}
    
