/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package myhustwork.luonvuituoi.GUI;

import java.awt.*;
import java.awt.geom.RoundRectangle2D;
import java.sql.SQLException;
import java.text.ParseException;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import myhustwork.luonvuituoi.BLL.AccountBLL;
import myhustwork.luonvuituoi.DTO.AccountDTO;
import myhustwork.luonvuituoi.Util.Converter;
import myhustwork.luonvuituoi.Util.GUIRelated;

/**
 *
 * @author vvlalalove193
 */
public class AccountGUI extends javax.swing.JFrame implements InforInterface<AccountDTO>{
    private AccountBLL accBLL;
    private int accId;
    
    /**
     * Creates new form AccountGUI
     */
    public AccountGUI() {
        this.accId = -1;
        accBLL = new AccountBLL();
        this.setTitle("LuonVuiTuoi");
        initComponents();
    }

    public int getAccId() {
        return accId;
    }

    public void setAccId(int accId) {
        this.accId = accId;
    }
    
    @Override
    public AccountDTO getInfor() throws ParseException, SQLException {
        AccountDTO acc = new AccountDTO();
        if (accId != -1){
            acc.setId(accId);
        }
        acc.setName(txtName.getText());
        acc.setBalance(Converter.formatAmount(txtBalance.getText()));
        acc.setSave_per_month(Converter.formatAmount(txtExpectedSavePerMonth.getText()));
        return acc;
    }
    
    @Override
    public void display(AccountDTO acc){
        txtName.setText(acc.getName());
        txtBalance.setText(acc.getBalance() + "");
        txtExpectedSavePerMonth.setText(acc.getSave_per_month() + "");
    }
    
    @Override
    public void refreshComponents(){
        txtName.setText("");
        txtBalance.setText("");
        txtExpectedSavePerMonth.setText("");
        accId = -1;
    }
    
    public ListModel<AccountDTO> getAllAccounts(){
        DefaultListModel listmodel = new DefaultListModel<AccountDTO>();
        AccountDTO[] list = null;
        try {
            list = accBLL.getAll();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "An error occured", "Error", JOptionPane.ERROR_MESSAGE);
        }
        for (AccountDTO i: list) {
            listmodel.addElement(i);
        }
        return listmodel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel1 = new keeptoo.KGradientPanel();
        lblForm = new javax.swing.JLabel();
        txtName = new RoundedJTextField();
        txtBalance = new RoundedJTextField();
        txtExpectedSavePerMonth = new RoundedJTextField();
        lblName = new javax.swing.JLabel();
        lblBalance = new javax.swing.JLabel();
        lblSavePerMonth = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstAccount = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setFont(new java.awt.Font("Maiandra GD", 0, 10)); // NOI18N
        setSize(new java.awt.Dimension(960, 540));

        kGradientPanel1.setFont(new java.awt.Font("r0c0i Linotte", 0, 14)); // NOI18N
        kGradientPanel1.setkEndColor(new java.awt.Color(255, 175, 175));
        kGradientPanel1.setkGradientFocus(100);
        kGradientPanel1.setkStartColor(new java.awt.Color(255, 255, 255));
        kGradientPanel1.setPreferredSize(new java.awt.Dimension(960, 540));

        lblForm.setFont(new java.awt.Font("r0c0i Linotte", 0, 36)); // NOI18N
        lblForm.setForeground(new java.awt.Color(255, 51, 51));
        lblForm.setText("Thông tin tài khoản");

        txtName.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N
        txtName.setForeground(new java.awt.Color(255, 51, 51));
        txtName.setPreferredSize(new java.awt.Dimension(438, 34));
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        txtBalance.setForeground(new java.awt.Color(255, 51, 51));
        txtBalance.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0"))));
        txtBalance.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N
        txtBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBalanceActionPerformed(evt);
            }
        });

        txtExpectedSavePerMonth.setForeground(new java.awt.Color(255, 51, 51));
        txtExpectedSavePerMonth.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0"))));
        txtExpectedSavePerMonth.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N
        txtExpectedSavePerMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtExpectedSavePerMonthActionPerformed(evt);
            }
        });

        lblName.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N
        lblName.setForeground(new java.awt.Color(255, 51, 51));
        lblName.setText("Tên tài khoản");

        lblBalance.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N
        lblBalance.setForeground(new java.awt.Color(255, 51, 51));
        lblBalance.setText("Số dư hiện tại");

        lblSavePerMonth.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N
        lblSavePerMonth.setForeground(new java.awt.Color(255, 51, 51));
        lblSavePerMonth.setText("<html><body>Số tiền dự định<br>tiết kiệm hàng tháng</body></html>");

        btnAdd.setBackground(new java.awt.Color(255, 51, 51));
        btnAdd.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Thêm");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(255, 51, 51));
        btnUpdate.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Sửa");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 51, 51));
        btnDelete.setFont(new java.awt.Font("r0c0i Linotte", 0, 18)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lstAccount.setModel(getAllAccounts());
        lstAccount.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstAccount.setCellRenderer(new AccountListRenderer());
        lstAccount.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstAccountValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstAccount);

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addGap(362, 362, 362)
                        .addComponent(lblForm))
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel1Layout.createSequentialGroup()
                .addContainerGap(59, Short.MAX_VALUE)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 859, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSavePerMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtExpectedSavePerMonth, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtBalance))))
                .addGap(42, 42, 42))
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(lblForm)
                .addGap(18, 18, 18)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName))
                .addGap(18, 18, 18)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBalance)
                    .addComponent(txtBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtExpectedSavePerMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSavePerMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtExpectedSavePerMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtExpectedSavePerMonthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtExpectedSavePerMonthActionPerformed

    private void txtBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBalanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBalanceActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        try {
                AccountDTO acc = this.getInfor();
                accBLL.addFromGUI(acc);
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(this, "An error occured", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "An error occured", "Error", JOptionPane.ERROR_MESSAGE);
            }
        refreshComponents();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        try {
                AccountDTO acc = this.getInfor();
                accBLL.updateFromGUI(acc);
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(this, "An error occured", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "An error occured", "Error", JOptionPane.ERROR_MESSAGE);
            }
        refreshComponents();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        try {
                AccountDTO acc = this.getInfor();
                accBLL.deleteFromGUI(acc);
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(this, "An error occured", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "An error occured", "Error", JOptionPane.ERROR_MESSAGE);
            }
        refreshComponents();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void lstAccountValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstAccountValueChanged
        // TODO add your handling code here:
        display(lstAccount.getSelectedValue());
        this.accId = lstAccount.getSelectedValue().getId();
    }//GEN-LAST:event_lstAccountValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private keeptoo.KGradientPanel kGradientPanel1;
    private javax.swing.JLabel lblBalance;
    private javax.swing.JLabel lblForm;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblSavePerMonth;
    private javax.swing.JList<AccountDTO> lstAccount;
    private javax.swing.JFormattedTextField txtBalance;
    private javax.swing.JFormattedTextField txtExpectedSavePerMonth;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}


class RoundedJTextField extends JFormattedTextField {
    private Shape shape;
    
    public RoundedJTextField() {
        setOpaque(false);
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        g.setColor(getBackground());
        g.fillRoundRect(0, 0, getWidth()-1, getHeight()-1, 15, 15);
        super.paintComponent(g);
    }
    
    @Override
    protected void paintBorder(Graphics g) {
        g.setColor(getForeground());
        g.drawRoundRect(0, 0, getWidth()-1, getHeight()-1, 15, 15);
    }
    
    @Override
    public boolean contains(int x, int y) {
        if (shape == null || !shape.getBounds().equals(getBounds())) {
            shape = new RoundRectangle2D.Float(0, 0, getWidth()-1, getHeight()-1, 15, 15);
        }
        return shape.contains(x, y);
    }
}

class AccountListRenderer extends JPanel implements ListCellRenderer<AccountDTO>{
    private JLabel lblIcon = new JLabel();
//    private JLabel lblCategoryName = new JLabel();
    private JLabel lblBalance = new JLabel();
    private JLabel lblName = new JLabel();
    Border lineBorder = BorderFactory.createLineBorder(Color.RED, 1);
    Border emptyBorder = BorderFactory.createEmptyBorder(2, 2, 2, 2);
 
    public AccountListRenderer() {
        setLayout(new BorderLayout(5, 5));
        JPanel panelText = new JPanel(new GridLayout(0, 1));
//        panelText.add(lblCategoryName);
        panelText.add(lblName);
        panelText.add(lblBalance);
        add(lblIcon, BorderLayout.WEST);
        add(panelText, BorderLayout.CENTER);
    }
 
    @Override
    public Component getListCellRendererComponent(JList<? extends AccountDTO>list, AccountDTO acc, int index,
            boolean isSelected, boolean cellHasFocus) {
        lblIcon.setSize(new Dimension(50,50));
        
        String imgUrl = "D:\\Pj\\LuonVuiTuoi\\src\\main\\java\\myhustwork\\luonvuituoi\\images\\account.png";
        
        ImageIcon img = new ImageIcon(imgUrl);
        lblIcon.setIcon(img);
        GUIRelated.scaleImage(imgUrl, lblIcon);
        
        lblName.setText(acc.getName());
        lblName.setFont(new java.awt.Font("r0c0i Linotte", 0, 18));
        lblName.setForeground(new java.awt.Color(255, 51,51));
        
        lblBalance.setText(Long.toString(acc.getBalance()));
        lblBalance.setFont(new java.awt.Font("r0c0i Linotte", 0, 18));
        lblBalance.setForeground(new java.awt.Color(255, 51,51));
        
        if (isSelected) {
            this.setForeground(list.getSelectionForeground());
            this.setBackground(list.getSelectionBackground());
            this.setBorder(new LineBorder(Color.BLUE));
        } else {
            this.setForeground(list.getForeground());
            this.setBackground(list.getBackground());
        }

        this.setBorder(cellHasFocus ? lineBorder : emptyBorder);
        return this;
    }
}